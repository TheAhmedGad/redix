name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: redix-linux-amd64
            artifact_name: binary-linux
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: redix-darwin-amd64
            artifact_name: binary-darwin
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: redix-windows-amd64.exe
            artifact_name: binary-windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for release notes

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build redix
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: go build -o ${{ matrix.binary_name }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for release notes

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries
        pattern: binary-*
        merge-multiple: true

    - name: List downloaded files
      run: ls -la binaries/

    - name: Generate release notes
      id: release_notes
      run: |
        if [ -z "$(git tag -l)" ]; then
          # If no tags exist, get all commits
          NOTES=$(git log --pretty=format:"* %s (%h)")
        else
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0)
          NOTES=$(git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)")
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
        files: |
          binaries/redix-linux-amd64
          binaries/redix-darwin-amd64
          binaries/redix-windows-amd64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 